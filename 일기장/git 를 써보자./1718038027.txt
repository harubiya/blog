- git 를 써보자.
- 
- 2024.06.11

버전별로 소스를 저장해두는 방법으로 소스관리를 했는데, 이게 편한데... chatgpt가 권장하지 않습니다. 단점이 많습니다. 비효율입니다.... 이러는데... 한번 git를 써보자. 근데 왜이리 복잡해. 

근데, 정말 구글검색은 망하는건가? 예전같으면 구글링으로 누군가 남겨둔 글들중 제일 적합한 것을 찾아 다녔는데, 이리 깔끔하게 정리해주니. (실제 되는지는 해봐야겄지만)
 
근데, 책쪽은 맹한 것같던데... 한국 서적중, 혹은 일본 책중에 이런저런 책 뭐야라든지, 추천해주라고 하면 헛소리. 비오는 바닷가에서 눈물흘리는 장면을 찾아줘 했더니 못하던데.. 그냥 말만 만드는 애니까, 책추천이나 장면검색같은 건 못하는 건가?...

덥다. 에어컨 틀고, 끄적끄적. 트위터 글자수 제한이 글을 군더더기 없애고 압축적으로 쓰게한 것은 좋은 것 같다. 글제한이 없으니 글이 주절주절 해지는 듯. 스치는 생각들 끄적해 두기에도 좋았던 것같고. 내 홈피도 글제한두고 해볼까?
 
아 오늘 그림일기는 그거 그리면 좋겠는데, 공부방 옥상에 담배피러 갔는데 마침 엘리베이터 문이 열리자 서있던 꼬맹이 화들짝 놀라는 장면. 내가 그리 무서워 보이나... 나도 놀란척해주고 목례보다 더 숙여서 인사해줌. 수염도 안깍고 머리를 밀어서 그런가. 모자쓰고 마스크를 쓰고 다닐까.
....

chatgpt=====================
Git을 사용하여 새로운 버전을 개발하고 관리할 때, 버전 관리의 표준 방법은 태그와 브랜치를 사용하는 것입니다. 이렇게 하면 특정 버전을 쉽게 식별할 수 있고, 작업 중인 개발 버전과 릴리즈된 버전을 명확히 구분할 수 있습니다. 아래에 그 방법을 자세히 설명하겠습니다.

### 1. 새로운 브랜치로 개발 시작

릴리즈된 버전에서 새로운 기능을 개발하거나 수정할 때는 새로운 브랜치를 생성하여 작업을 진행합니다. 예를 들어, 1.0.0 버전을 릴리즈한 후 1.0.1 버전을 개발한다고 가정합니다.

```sh
# 현재 main (또는 master) 브랜치에서 새로운 브랜치 생성
git checkout -b develop-1.0.1
```

### 2. 새로운 브랜치에 작업 후 커밋

개발 작업을 진행한 후 변경 사항을 커밋합니다.

```sh
# 파일 수정 후 변경 사항 추가
git add .
git commit -m "Start development for version 1.0.1"
```

### 3. 새로운 버전으로 Push

새로 생성한 브랜치를 원격 저장소에 push합니다.

```sh
git push origin develop-1.0.1
```

### 4. 기능 개발 완료 후 병합 및 태그

개발이 완료되면 해당 브랜치를 main (또는 master) 브랜치에 병합하고 새로운 버전 태그를 추가합니다.

```sh
# main 브랜치로 체크아웃
git checkout main

# 병합 (fast-forward 방식)
git merge develop-1.0.1

# 새로운 버전 태그 추가
git tag v1.0.1

# 병합된 브랜치와 태그를 원격 저장소에 push
git push origin main
git push origin v1.0.1
```

### 5. 브랜치 관리

필요 없어진 브랜치는 삭제하여 관리할 수 있습니다.

```sh
# 로컬 브랜치 삭제
git branch -d develop-1.0.1

# 원격 브랜치 삭제
git push origin --delete develop-1.0.1
```

### 전체 예시

1. **새 브랜치 생성 및 작업**

    ```sh
    git checkout -b develop-1.0.1
    # 작업 수행
    git add .
    git commit -m "Start development for version 1.0.1"
    git push origin develop-1.0.1
    ```

2. **작업 완료 후 병합 및 태그**

    ```sh
    git checkout main
    git merge develop-1.0.1
    git tag v1.0.1
    git push origin main
    git push origin v1.0.1
    ```

3. **불필요한 브랜치 삭제**

    ```sh
    git branch -d develop-1.0.1
    git push origin --delete develop-1.0.1
    ```

### 요약

1. **새로운 버전 개발 시 브랜치를 사용**하여 작업을 진행하고, 버전이 완료되면 **main 브랜치에 병합 후 태그**를 추가합니다.
2. **태그를 사용**하여 각 릴리즈 버전을 명확하게 구분합니다.
3. **불필요한 브랜치는 삭제**하여 브랜치 관리를 간소화합니다.

이렇게 하면 버전 간의 변경 사항을 명확히 추적하고, 작업 중인 개발 버전과 릴리즈된 버전을 쉽게 관리할 수 있습니다.

////
작업중인 소스를 백업할때 (스테이징 -> 커밋 -> 원격저장소에 push)
git branch (현재 브랜치 확인)
git add .
git commit -m "작업내용 간략히 설명 혹은 제목만.\n\n(여기서부터 본문)제목은 50자 본문은 70자 제한"
git push origin [브랜치 이름]

commit 을 자주하면, 작업내용 히스토리를 알 수 있어서 자주 하는 게 좋다고.

/////
다른 컴퓨터에서 프로젝트를 가져와서 이어 작업할때
git clone https://github.com/username/repository-name.git
cd repository-name
git checkout your-branch-name
git pull origin your-branch-name

